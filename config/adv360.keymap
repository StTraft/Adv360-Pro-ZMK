/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        vim_copy: vim_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 40>,
                <&macro_tap_time 40>,
                <&kp DQT &kp ASTRK &kp Y &kp ENTER>;

            label = "VIM_COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1    &kp N2    &kp N3    &kp N4     &kp N5  &tog 1                                                                                         &mo 3      &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &kp BSPC
&kp TAB    &kp Q     &kp W     &kp E     &kp R      &kp T   &none                                                                                          &kp UP     &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S     &kp D     &kp F      &kp G   &none            &kp LC(LG(A))       &kp LC(LG(D))      &kp RGUI                   &kp RCTRL   &kp DOWN   &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z     &kp X     &kp C     &kp V      &kp B                                        &mo 2              &mt LC(UP) UP                                     &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 4      &kp LALT  &kp CAPS  &kp LEFT  &kp RIGHT          &mt LCTRL SPACE  &mt LGUI BACKSPACE  &lt 4 ENTER        &mt RC(RA(RS(RGUI))) DOWN  &kp RETURN  &kp SPACE          &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp GRAVE  &kp N1    &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                                     &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp BSPC
&kp TAB    &kp Q     &kp W     &kp E     &kp R      &kp T   &none                                                                      &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A     &kp S     &kp D     &kp F      &kp G   &none            &kp LC(A)           &kp LC(D)      &kp LGUI   &kp RCTRL   &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z     &kp X     &kp C     &kp V      &kp B                                        &kp HOME       &kp PG_UP                         &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp LALT  &kp CAPS  &kp LEFT  &kp RIGHT          &mt LCTRL SPACE  &mt LGUI BACKSPACE  &mo 4          &kp PG_DN  &kp RETURN  &kp KP_N0          &kp MINUS   &kp EQUAL     &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1     &kp F2  &kp F3  &kp F4        &kp F5    &kp F6  &tog 1                                            &mo 3      &kp F7  &kp F8    &kp F9    &kp F10    &kp F11  &kp F12
&trans     &trans  &trans  &trans        &trans    &trans  &none                                             &none      &trans  &trans    &kp UP    &trans     &trans   &trans
&trans     &trans  &trans  &trans        &trans    &trans  &none   &vim_copy  &trans      &trans  &trans     &none      &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans   &trans
&kp LSHFT  &trans  &trans  &trans        &trans    &trans                     &trans      &trans                        &trans  &trans    &trans    &trans     &trans   &kp RSHFT
&trans     &trans  &trans  &kp LEFT_ALT  &kp LGUI          &trans  &trans     &trans      &trans  &kp ENTER  &kp SPACE          &trans    &trans    &trans     &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_SP_CHAR {
            bindings = <
&trans     &trans     &trans     &trans        &trans         &trans  &trans                                                              &trans  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &none     &none     &none         &kp BACKSPACE
&trans     &none      &none      &none         &none          &none   &trans                                                              &trans  &kp CARET          &kp LPAR      &kp RPAR  &kp LBRC  &kp RBRC      &kp LS(BACKSLASH)
&trans     &kp EXCL   &kp AT     &kp HASH      &kp DOLLAR     &none   &trans  &vim_copy  &kp LS(LG(NUMBER_4))      &trans         &trans  &trans  &kp AMPS           &kp LC(P)     &kp LBKT  &kp RBKT  &kp LS(SEMI)  &kp LS(SQT)
&kp LSHFT  &kp PRCNT  &kp CARET  &kp AMPS      &kp ASTRK      &none                      &trans                    &trans                         &kp ASTRK          &kp LC(N)     &none     &kp UP    &kp LS(FSLH)  &kp ENTER
&trans     &trans     &trans     &kp LA(LEFT)  &kp LA(RIGHT)          &trans  &trans     &trans                    &kp LC(LG(P))  &trans  &trans                     &trans        &kp LEFT  &kp DOWN  &kp RIGHT     &kp RSHFT
            >;
        };
    };
};
